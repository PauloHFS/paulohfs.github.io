"use strict";(self.webpackChunkpaulohernane_me=self.webpackChunkpaulohernane_me||[]).push([[1124],{6663:(e,n,r)=>{r.d(n,{A:()=>i});const i=r.p+"assets/images/image-30661f4f28d3637a53999269282f6ee8.jpg"},6985:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>t,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"concurrent-programming/concurrency-vs-parallelism","title":"Concurrency vs Parallelism","description":"Alt text","source":"@site/my-brain/concurrent-programming/concurrency-vs-parallelism.md","sourceDirName":"concurrent-programming","slug":"/concurrent-programming/concurrency-vs-parallelism","permalink":"/my-brain/concurrent-programming/concurrency-vs-parallelism","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Concurrent Programming","permalink":"/my-brain/tags/concurrent-programming"},{"inline":true,"label":"Process","permalink":"/my-brain/tags/process"},{"inline":true,"label":"Thread","permalink":"/my-brain/tags/thread"},{"inline":true,"label":"Routine","permalink":"/my-brain/tags/routine"},{"inline":true,"label":"Concurrency","permalink":"/my-brain/tags/concurrency"},{"inline":true,"label":"Parallelism","permalink":"/my-brain/tags/parallelism"}],"version":"current","frontMatter":{"id":"concurrency-vs-parallelism","title":"Concurrency vs Parallelism","tags":["Concurrent Programming","Process","Thread","Routine","Concurrency","Parallelism"]},"sidebar":"myBrainSidebar","previous":{"title":"Classical Synchronization Problems","permalink":"/my-brain/concurrent-programming/classical-synchronization-problems"},"next":{"title":"Semaphore","permalink":"/my-brain/concurrent-programming/semaphore"}}');var l=r(4848),s=r(8453);const t={id:"concurrency-vs-parallelism",title:"Concurrency vs Parallelism",tags:["Concurrent Programming","Process","Thread","Routine","Concurrency","Parallelism"]},a="Concurrency vs Parallelism",c={},o=[{value:"Definitions",id:"definitions",level:2},{value:"Processes, Threads and Routines",id:"processes-threads-and-routines",level:2},{value:"Litmus Test",id:"litmus-test",level:2}];function u(e){const n={h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"concurrency-vs-parallelism",children:"Concurrency vs Parallelism"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"Alt text",src:r(6663).A+"",width:"1003",height:"555"})}),"\n",(0,l.jsx)(n.h2,{id:"definitions",children:"Definitions"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Concurrency"})," is the act of running and managing multiple computations at the same time."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Parallelism"})," is the act of running multiple computations simultaneously."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"All parallelism is concurrency, but not all concurrency is parallelism. We can have concurrency without parallelism. Example:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"A single-core CPU can run multiple processes, but only one at a time. So, the processes are running concurrently, but not in parallel."}),"\n",(0,l.jsx)(n.li,{children:"A multi-core CPU can run multiple processes simultaneously. So, the processes are running concurrently and in parallel."}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"processes-threads-and-routines",children:"Processes, Threads and Routines"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Process"})," is the program in exacution on the OS."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Threads"})," are the units of execution within a process."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Coroutine"})," is similar to a thread, but it is cooperative, not preemptive. The routine must explicitly give up control to the scheduler."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can have multiple threads in a process, and in the threads you can have multiple coroutines without blocking the thread."}),"\n",(0,l.jsx)(n.h2,{id:"litmus-test",children:"Litmus Test"}),"\n",(0,l.jsx)(n.p,{children:"How to tell if a program run in concurrent or parallel?"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Single-core CPU: All programs run concurrently, but not in parallel."}),"\n",(0,l.jsx)(n.li,{children:"Multi-core CPU: All programs run concurrently and may run in parallel sometimes."}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>a});var i=r(6540);const l={},s=i.createContext(l);function t(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);