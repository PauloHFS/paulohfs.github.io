"use strict";(self.webpackChunkpaulohernane_me=self.webpackChunkpaulohernane_me||[]).push([[6553],{3203:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var t=a(4848),r=a(5680);const i={id:"feature-engineering-and-selection",title:"Feature Engineering and Selection",tags:["machine-learning","feature-engineering","feature-selection","data-preprocessing"]},c=void 0,o={id:"data-science/machine-learning/machine-learning-and-data-science-course/feature-engineering-and-selection",title:"Feature Engineering and Selection",description:"It's note true that more atributtes will make a model better.",source:"@site/my-brain/data-science/machine-learning/machine-learning-and-data-science-course/feature-engineering-and-selection.md",sourceDirName:"data-science/machine-learning/machine-learning-and-data-science-course",slug:"/data-science/machine-learning/machine-learning-and-data-science-course/feature-engineering-and-selection",permalink:"/my-brain/data-science/machine-learning/machine-learning-and-data-science-course/feature-engineering-and-selection",draft:!1,unlisted:!1,tags:[{label:"machine-learning",permalink:"/my-brain/tags/machine-learning"},{label:"feature-engineering",permalink:"/my-brain/tags/feature-engineering"},{label:"feature-selection",permalink:"/my-brain/tags/feature-selection"},{label:"data-preprocessing",permalink:"/my-brain/tags/data-preprocessing"}],version:"current",frontMatter:{id:"feature-engineering-and-selection",title:"Feature Engineering and Selection",tags:["machine-learning","feature-engineering","feature-selection","data-preprocessing"]},sidebar:"myBrainSidebar",previous:{title:"Dimensionality Reduction",permalink:"/my-brain/data-science/machine-learning/machine-learning-and-data-science-course/dimensionality-reduction"},next:{title:"Model Validation",permalink:"/my-brain/data-science/machine-learning/machine-learning-and-data-science-course/model-validation"}},s={},l=[{value:"Low variance",id:"low-variance",level:2},{value:"High correlation",id:"high-correlation",level:2},{value:"Extra tree",id:"extra-tree",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.RP)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"It's note true that more atributtes will make a model better.\nSo we need to select the best features to use in our model."}),"\n",(0,t.jsx)(n.h2,{id:"low-variance",children:"Low variance"}),"\n",(0,t.jsx)(n.p,{children:"Variance is a measure of how much the value is spread out (has a large range).\nIf a feature has a low variance, it means that the values are very similar."}),"\n",(0,t.jsxs)(n.p,{children:["We can use the ",(0,t.jsx)(n.code,{children:"VarianceThreshold"})," class from ",(0,t.jsx)(n.code,{children:"sklearn.feature_selection"})," to remove features with low variance."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sklearn.feature_selection import VarianceThreshold\n\n# Create a VarianceThreshold object\nselector = VarianceThreshold(threshold=0.2)\n\n# Fit the object to the data\nselector.fit(data)\n\n# Get the indices of the features that are being kept\nkept_indices = selector.get_support(indices=True)\n\n# Get the names of the features that are being kept\nkept_features = data.columns[kept_indices]\n\n# Transform the data to only keep the selected features\ndata_selected = selector.transform(data)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To get the threshold value, we can use the ",(0,t.jsx)(n.code,{children:"np.var"})," function from NumPy to calculate the variance of each feature."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Calculate the variance of each feature\nvariances = np.var(data, axis=0) # axis=0 calculates the variance of each column\n\n# Get the names of the features with low variance\nlow_variance_features = data.columns[variances < 0.2]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"high-correlation",children:"High correlation"}),"\n",(0,t.jsx)(n.p,{children:"Correlation is a measure of how much two variables change together.\nIf two features are highly correlated, they may contain redundant information."}),"\n",(0,t.jsxs)(n.p,{children:["We can use the ",(0,t.jsx)(n.code,{children:"corr"})," method from a pandas DataFrame to calculate the correlation between features."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Calculate the correlation matrix\ncorrelation_matrix = data.corr()\n\n# Get the indices of the features that are highly correlated\nhighly_correlated_indices = np.where(np.abs(correlation_matrix) > 0.8)\n\n# Get the names of the features that are highly correlated\nhighly_correlated_features = data.columns[highly_correlated_indices]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"extra-tree",children:"Extra tree"}),"\n",(0,t.jsx)(n.p,{children:"Extra Trees is an ensemble learning method that fits multiple decision trees to the data and averages the predictions.\nThis uses the Extra Trees not for classification or regression, but to calculate the feature importance."}),"\n",(0,t.jsxs)(n.p,{children:["We can use the ",(0,t.jsx)(n.code,{children:"ExtraTreesClassifier"})," and ",(0,t.jsx)(n.code,{children:"ExtraTreesRegressor"})," classes from ",(0,t.jsx)(n.code,{children:"sklearn.ensemble"})," to calculate the feature importance."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sklearn.ensemble import ExtraTreesClassifier\n\n# Split the data into training and testing sets\ndata = df.drop('target', axis=1) # axis=1 drops the 'target' column\ntarget = df['target']\n\n# Create an ExtraTreesClassifier object\nmodel = ExtraTreesClassifier(criterion='gini', random_state=42)\n\n# Fit the model to the data\nmodel.fit(data, target)\n\n# Get the feature importances\nfeature_importances = model.feature_importances_\n\n# Drop the features with low importance\ndata_selected = data.drop(data.columns[feature_importances < 0.1], axis=1)\n\n# Get the names of the features with low importance\nlow_importance_features = data.columns[feature_importances < 0.1]\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.RP)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},5680:(e,n,a)=>{a.d(n,{RP:()=>l});var t=a(6540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function c(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),l=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):c(c({},n),e)),a},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),u=l(a),m=r,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return a?t.createElement(f,c(c({ref:n},h),{},{components:a})):t.createElement(f,c({ref:n},h))}));h.displayName="MDXCreateElement"}}]);