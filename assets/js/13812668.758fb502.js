"use strict";(self.webpackChunkpaulohernane_me=self.webpackChunkpaulohernane_me||[]).push([[2396],{5734:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"linux/driver-development/make-and-makefile","title":"Make and Makefile","description":"Make","source":"@site/my-brain/linux/driver-development/make-and-makefile.md","sourceDirName":"linux/driver-development","slug":"/linux/driver-development/make-and-makefile","permalink":"/my-brain/linux/driver-development/make-and-makefile","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"make","permalink":"/my-brain/tags/make"},{"inline":true,"label":"makefile","permalink":"/my-brain/tags/makefile"}],"version":"current","frontMatter":{"id":"make-and-makefile","title":"Make and Makefile","tags":["make","makefile"]},"sidebar":"myBrainSidebar","previous":{"title":"Driver Development","permalink":"/my-brain/linux/driver-development/"},"next":{"title":"Driver","permalink":"/my-brain/linux/driver"}}');var i=a(4848),t=a(8453);const r={id:"make-and-makefile",title:"Make and Makefile",tags:["make","makefile"]},s=void 0,d={},c=[{value:"Make",id:"make",level:2},{value:"Usage",id:"usage",level:3},{value:"Makefile",id:"makefile",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Example",id:"example",level:3},{value:"Variables",id:"variables",level:3}];function o(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"make",children:"Make"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"make"})," is a automation tool that helps we to executing commands in a more organized way. It is used to compile and build large projects, but it can be used for any task that requires executing a series of commands."]}),"\n",(0,i.jsxs)(n.p,{children:["Its usefull when we have a project with multiple files and we need to compile them in a specific order. Instead of compiling each file manually, we can use ",(0,i.jsx)(n.code,{children:"make"})," to automate the process."]}),"\n",(0,i.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"make [target]\n\n# passing a Makefile\n\nmake -f /foo/bar/Makefile [target]\n\n"})}),"\n",(0,i.jsx)(n.h2,{id:"makefile",children:"Makefile"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"Makefile"})," is a file that contains a set of rules used by ",(0,i.jsx)(n.code,{children:"make"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-makefile",children:"target: dependencies\n    command\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"target"}),": The name of the target to be executed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"dependencies"}),": The files or targets that the target depends on. If any of the dependencies are newer than the target, the command will be executed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"command"}),": The command to be executed."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-makefile",children:"hello: hello.c\n    gcc -o hello hello.c\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this example, we have a target called ",(0,i.jsx)(n.code,{children:"hello"})," that depends on the file ",(0,i.jsx)(n.code,{children:"hello.c"}),". The command ",(0,i.jsx)(n.code,{children:"gcc -o hello hello.c"})," is executed to compile the ",(0,i.jsx)(n.code,{children:"hello.c"})," file."]}),"\n",(0,i.jsx)(n.h3,{id:"variables",children:"Variables"}),"\n",(0,i.jsxs)(n.p,{children:["Variables can be defined in a ",(0,i.jsx)(n.code,{children:"Makefile"})," to store values that can be reused throughout the file."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-makefile",children:"CC = gcc\nCFLAGS = -Wall -Wextra\nPATH += /usr/local/bin # append to PATH\n\nhello: hello.c\n    $(CC) $(CFLAGS) -o hello hello.c\n"})})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>s});var l=a(6540);const i={},t=l.createContext(i);function r(e){const n=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);