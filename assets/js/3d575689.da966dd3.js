"use strict";(self.webpackChunkpaulohernane_me=self.webpackChunkpaulohernane_me||[]).push([[4646],{5640:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>t,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"concurrent-programming/classical-synchronization-problems","title":"Classical Synchronization Problems","description":"Producer-Consumer Problem","source":"@site/my-brain/concurrent-programming/classical-synchronization-problems.md","sourceDirName":"concurrent-programming","slug":"/concurrent-programming/classical-synchronization-problems","permalink":"/my-brain/concurrent-programming/classical-synchronization-problems","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Concurrent Programming","permalink":"/my-brain/tags/concurrent-programming"},{"inline":true,"label":"Synchronization Patterns","permalink":"/my-brain/tags/synchronization-patterns"}],"version":"current","frontMatter":{"id":"classical-synchronization-problems","title":"Classical Synchronization Problems","tags":["Concurrent Programming","Synchronization Patterns"]},"sidebar":"myBrainSidebar","previous":{"title":"Basic Synchronization Patterns","permalink":"/my-brain/concurrent-programming/basic-synchronization-patterns"},"next":{"title":"Concurrency vs Parallelism","permalink":"/my-brain/concurrent-programming/concurrency-vs-parallelism"}}');var s=r(4848),o=r(8453);const a={id:"classical-synchronization-problems",title:"Classical Synchronization Problems",tags:["Concurrent Programming","Synchronization Patterns"]},l="Classical Synchronization Problems",t={},c=[{value:"Producer-Consumer Problem",id:"producer-consumer-problem",level:2},{value:"Solving using Semaphores",id:"solving-using-semaphores",level:3},{value:"Solving using Conditional Variable",id:"solving-using-conditional-variable",level:2}];function u(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",pre:"pre",...(0,o.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"classical-synchronization-problems",children:"Classical Synchronization Problems"})}),"\n",(0,s.jsx)(e.h2,{id:"producer-consumer-problem",children:"Producer-Consumer Problem"}),"\n",(0,s.jsx)(e.h3,{id:"solving-using-semaphores",children:"Solving using Semaphores"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"# main\nMAX_SIZE = 2 # buffer size\n\nclass Buffer:\n    def __init__(self, size):\n        self.buffer = [None for _ in range(size)]\n        self.size = size\n        self.fill = 0\n        self.use = 0\n        self.mutex = Semaphore(1)\n        # TEST if using 1 or 2 semaphores is better\n\n    def put(v):\n        self.mutex.wait()\n        self.buffer[self.fill] = v\n        self.fill = (self.fill + 1) % self.size\n        self.mutex.signal()\n\n    def get():\n        self.mutex.wait()\n        v = self.buffer[self.use]\n        self.use = (self.use + 1) % self.size\n        self.mutex.signal()\n        return v\n\nbuffer = Buffer(MAX_SIZE)\nproducerDone = Semaphore(0)\nconsumerDone = Semaphore(MAX_SIZE)\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"# Thread A\n\ndef producer():\n    for i in range(0, 100):\n        consumerDone.wait()\n        buffer.put(i)\n        producerDone.signal()\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-py",children:"# Thread B\n\ndef consumer():\n    for i in range(0, 100):\n        producerDone.wait()\n        v = buffer.get()\n        print(v)\n"})}),"\n",(0,s.jsx)(e.h2,{id:"solving-using-conditional-variable",children:"Solving using Conditional Variable"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-c",children:"// main\n\nint *buffer;\nmutex_t buffer_mutex;\ncond_t fill;\ncond_t empty\n\nsem_init(&buffer_mutex, 1);\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-c",children:"// Producer\n\nfor (int i; i < 100; i++) {\n    mutex_lock(&buffer_mutex) \n    while (buffer_is_full(&buffer) {\n        cond_wait(&empty, &buffer_mutex) \n    }\n    put(&buffer, i) \n    cond_signal(&fill)  \n    mutex_unlock(&buffer_mutex) \n}\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-c",children:"// Consumer\n\nfor (int i; i < 100; i++) {\n    mutex_lock(&buffer_mutex) \n    while (buffer_is_empty(&buffer) {\n        cond_wait(&fill, &buffer_mutex) \n    }\n    take(&buffer)\n    cond_signal(&empty)\n    mutex_unlock(&buffer_mutex)\n}\n"})})]})}function m(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(u,{...n})}):u(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>a,x:()=>l});var i=r(6540);const s={},o=i.createContext(s);function a(n){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),i.createElement(o.Provider,{value:e},n.children)}}}]);