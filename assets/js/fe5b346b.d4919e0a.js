"use strict";(self.webpackChunkpaulohernane_me=self.webpackChunkpaulohernane_me||[]).push([[8652],{7913:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>f,contentTitle:()=>l,default:()=>o,frontMatter:()=>t,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"leet-code/arrays-and-hashing","title":"Arrays and Hashing","description":"Dynamic Array","source":"@site/my-brain/leet-code/arrays-and-hashing.md","sourceDirName":"leet-code","slug":"/leet-code/arrays-and-hashing","permalink":"/my-brain/leet-code/arrays-and-hashing","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"arrays-and-hashing","title":"Arrays and Hashing"},"sidebar":"myBrainSidebar","previous":{"title":"Leet Code","permalink":"/my-brain/leet-code/"},"next":{"title":"Linux","permalink":"/my-brain/linux/"}}');var s=r(4848),i=r(8453);const t={id:"arrays-and-hashing",title:"Arrays and Hashing"},l=void 0,f={},d=[{value:"Dynamic Array",id:"dynamic-array",level:2},{value:"Two Pointers",id:"two-pointers",level:2},{value:"Hash Usage",id:"hash-usage",level:2},{value:"Hash Implementation",id:"hash-implementation",level:2},{value:"Hash Collision",id:"hash-collision",level:2},{value:"Hash Set",id:"hash-set",level:2},{value:"Prefix Sums",id:"prefix-sums",level:2}];function h(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"dynamic-array",children:"Dynamic Array"}),"\n",(0,s.jsx)(n.p,{children:"Dynamic array is an array that grows in size as more elements are added to it. It is implemented by creating a new array with double the size of the original array and copying the elements from the original array to the new array."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class DynamicArray:\n    def __init__(self):\n        self.capacity = 1\n        self.size = 0\n        self.arr = [0] * self.capacity\n\n    def add(self, element):\n        if self.size == self.capacity:\n            self.capacity *= 2\n            new_arr = [0] * self.capacity\n            for i in range(self.size):\n                new_arr[i] = self.arr[i]\n            self.arr = new_arr\n        self.arr[self.size] = element\n        self.size += 1\n\n    def get(self, index):\n        if index < 0 or index >= self.size:\n            return -1\n        return self.arr[index]\n\n    def remove(self, index):\n        if index < 0 or index >= self.size:\n            return\n        for i in range(index, self.size - 1):\n            self.arr[i] = self.arr[i+1]\n        self.size -= 1\n"})}),"\n",(0,s.jsx)(n.h2,{id:"two-pointers",children:"Two Pointers"}),"\n",(0,s.jsx)(n.p,{children:"Two pointers is a technique where two pointers are used to solve a problem. The two pointers can be used to solve problems where we need to find a pair of elements that satisfy a condition."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def two_pointers(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] + arr[right] == target:\n            return [left, right]\n        elif arr[left] + arr[right] < target:\n            left += 1\n        else:\n            right -= 1\n    return [-1, -1]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"hash-usage",children:"Hash Usage"}),"\n",(0,s.jsx)(n.p,{children:"Hash is a data structure that stores key-value pairs. It is used to store elements in a way that allows for fast retrieval of elements."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'hash_map = {}\nhash_map[1] = "one"\nhash_map[2] = "two"\nhash_map[3] = "three"\n\nprint(hash_map[1]) # one\nprint(hash_map[2]) # two\nprint(hash_map[3]) # three\n'})}),"\n",(0,s.jsx)(n.h2,{id:"hash-implementation",children:"Hash Implementation"}),"\n",(0,s.jsx)(n.p,{children:"Hash can be implemented using an array of linked lists. The key is hashed to an index in the array and the value is stored in the linked list at that index."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Hash:\n    def __init__(self):\n        self.capacity = 10\n        self.arr = [None] * self.capacity\n\n    def hash(self, key):\n        return key % self.capacity\n\n    def put(self, key, value):\n        index = self.hash(key)\n        if self.arr[index] is None:\n            self.arr[index] = []\n        self.arr[index].append((key, value))\n\n    def get(self, key):\n        index = self.hash(key)\n        if self.arr[index] is None:\n            return None\n        for k, v in self.arr[index]:\n            if k == key:\n                return v\n        return None\n\n    def remove(self, key):\n        index = self.hash(key)\n        if self.arr[index] is None:\n            return\n        for i, (k, v) in enumerate(self.arr[index]):\n            if k == key:\n                self.arr[index].pop(i)\n                return\n"})}),"\n",(0,s.jsx)(n.h2,{id:"hash-collision",children:"Hash Collision"}),"\n",(0,s.jsx)(n.p,{children:"Hash collision is when two keys hash to the same index in the hash table. It can be resolved by using a linked list to store the key-value pairs at that index."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Hash:\n    def __init__(self):\n        self.capacity = 10\n        self.arr = [None] * self.capacity\n\n    def hash(self, key):\n        return key % self.capacity\n\n    def put(self, key, value):\n        index = self.hash(key)\n        if self.arr[index] is None:\n            self.arr[index] = []\n        for i, (k, v) in enumerate(self.arr[index]):\n            if k == key:\n                self.arr[index][i] = (key, value)\n                return\n        self.arr[index].append((key, value))\n\n    def get(self, key):\n        index = self.hash(key)\n        if self.arr[index] is None:\n            return None\n        for k, v in self.arr[index]:\n            if k == key:\n                return v\n        return None\n\n    def remove(self, key):\n        index = self.hash(key)\n        if self.arr[index] is None:\n            return\n        for i, (k, v) in enumerate(self.arr[index]):\n            if k == key:\n                self.arr[index].pop(i)\n                return\n"})}),"\n",(0,s.jsx)(n.h2,{id:"hash-set",children:"Hash Set"}),"\n",(0,s.jsx)(n.p,{children:"Hash set is a set that stores unique elements. It is implemented using a hash table where the key is the element and the value is a dummy value."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class HashSet:\n    def __init__(self):\n        self.capacity = 10\n        self.arr = [None] * self.capacity\n\n    def hash(self, key):\n        return key % self.capacity\n\n    def add(self, key):\n        index = self.hash(key)\n        if self.arr[index] is None:\n            self.arr[index] = []\n        for k in self.arr[index]:\n            if k == key:\n                return\n        self.arr[index].append(key)\n\n    def contains(self, key):\n        index = self.hash(key)\n        if self.arr[index] is None:\n            return False\n        for k in self.arr[index]:\n            if k == key:\n                return True\n        return False\n\n    def remove(self, key):\n        index = self.hash(key)\n        if self.arr[index] is None:\n            return\n        for i, k in enumerate(self.arr[index]):\n            if k == key:\n                self.arr[index].pop(i)\n                return\n"})}),"\n",(0,s.jsx)(n.h2,{id:"prefix-sums",children:"Prefix Sums"}),"\n",(0,s.jsx)(n.p,{children:"Prefix sums is a the technique of storing the sum of all elements in the array."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"\narr = [1, 2, 3, 4, 5]\nprefix_sum = [0] * len(arr)\n\nprefix_sum[0] = arr[0]\nfor i in range(1, len(arr)):\n    prefix_sum[i] = prefix_sum[i-1] + arr[i]\n\nprint(prefix_sum[2]) # 6 = 3 + 3 = prefix_sum[1] + arr[2] = arr[0] + arr[1] + arr[2] = 1 + 2 + 3\nprint(prefix_sum[4]) # 15 = 10 + 5 = prefix_sum[3] + arr[4] = arr[0] + arr[1] + arr[2] + arr[3] + arr[4] = 1 + 2 + 3 + 4 + 5 \n"})})]})}function o(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var a=r(6540);const s={},i=a.createContext(s);function t(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);